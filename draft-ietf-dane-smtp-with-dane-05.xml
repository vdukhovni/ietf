<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3207 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3207.xml">
<!ENTITY RFC4033 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC5280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5321 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5321.xml">
<!ENTITY RFC5598 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5598.xml">
<!ENTITY RFC6125 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC6186 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6186.xml">
<!ENTITY RFC6394 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6394.xml">
<!ENTITY RFC6409 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6409.xml">
<!ENTITY RFC6066 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6066.xml">
<!ENTITY RFC6698 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6698.xml">
<!ENTITY RFC6895 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6895.xml">
<!ENTITY I-D.ietf-dane-srv SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dane-srv.xml">
<!ENTITY I-D.ietf-dane-smtp SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dane-smtp.xml">
<!ENTITY I-D.ietf-dane-ops SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dane-ops.xml">
<!ENTITY I-D.ietf-dane-registry-acronyms SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dane-registry-acronyms.xml">
]>

<!-- rfc xmlns:x="http://purl.org/net/xml2rfc/ext" category="std" -->
<rfc category="std" docName="draft-ietf-dane-smtp-with-dane-05" ipr="trust200902">

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<front>
<title>SMTP security via opportunistic DANE TLS</title>
<author fullname="Viktor Dukhovni" initials="V." surname="Dukhovni">
    <organization>Unaffiliated</organization>
    <address>
    <email>ietf-dane@dukhovni.org</email>
    </address>
</author>
    <author initials="W.H." surname="Hardaker" fullname="Wes Hardaker">
      <organization>Parsons</organization>
      <address>
        <postal>
          <street>P.O. Box 382</street>
          <city>Davis</city>
          <region>CA</region>
          <code>95617</code>
          <country>US</country>
        </postal>
        <email>ietf@hardakers.net</email>
      </address>
    </author>
<date month="January" year="2014"/>
<area>sec</area>
<workgroup>DANE</workgroup>
<keyword>DANE</keyword>
<keyword>TLSA</keyword>
<keyword>SMTP</keyword>

<abstract> <t>
This memo describes a downgrade-resistant protocol for SMTP transport
security based on the DNS-Based Authentication of Named Entities
(DANE) TLSA DNS record.  Adoption of this protocol enables an
incremental transition of the Internet email backbone to one using
encrypted and authenticated Transport Layer Security (TLS).
</t> </abstract>

</front>

<middle>
<section title="Introduction">

<t>
There has historically been no scalable way for Simple Mail Transport
Protocol (SMTP) server operators to deploy Transport Layer Security
(TLS) using X.509 certificates with a client-trusted subject name.
It is only with the deployment of Domain Name System Security
Extensions (DNSSEC) and DNS-Based Authentication of Named Entities
(DANE) that authenticated TLS for server to server SMTP becomes
practical between parties that have not already established an
identity convention out-of-band.
</t>

<section title="Background">
<t>
The Domain Name System Security Extensions (DNSSEC) adds data origin
authentication, data integrity and type non-existence proofs to the
Domain Name System (DNS).  DNSSEC is defined in <xref
target="RFC4033"/>, <xref target="RFC4034"/> and <xref
target="RFC4035"/>.
</t>

<t>
As described in the introduction of <xref target="RFC6698"/>, TLS
authentication via the existing public Certificate Authority (CA)
PKI suffers from an over-abundance of
trusted certificate authorities capable of issuing certificates for
any domain of their choice.  DANE leverages the DNSSEC infrastructure
to publish trusted public keys and certificates for use with TLS via a new
"TLSA" DNS record type.
</t>

<t>
The Transport Layer Security (TLS) <xref target="RFC5246"/> protocol
enables secure TCP communication.  In the context of this memo,
channel security is assumed to be provided by TLS.  Used without
authentication, TLS provides only privacy protection against
eavesdropping attacks.  With
authentication, TLS also provides data integrity protection to guard
against man-in-the-middle (MITM) attacks.
</t>

</section><!-- Background -->

<section title="SMTP Channel Security" anchor="channelsec">

<!-- XXXWJH-to-self: seems either too long or not linear enough -->

<t>
The Simple Mail Transfer Protocol (SMTP) <xref target="RFC5321" />
is a single-hop protocol in a multi-hop store &amp; forward email routing
process.  TLS encryption of SMTP protects email traffic only on a hop-by-hop basis.  The number of hops from
the sender's Message User Agent (MUA) to the recipient mailbox is
rarely less than 2 and is often higher.  Some hops may be protected by
TLS, and some may not.
</t>

<t>
The same SMTP TCP endpoint can serve both TLS and non-TLS clients,
with the use of TLS negotiated via the SMTP STARTTLS command (<xref
target="RFC3207"/>).  DNS Mail Exchange (MX) records abstract the next-hop transport
endpoint by allowing network administrators to specify a set of
target servers to which SMTP traffic should be directed for a given
domain.
</t>

<t>
SMTP recipient addresses are not transport addresses and are
security-agnostic.  Unlike the Hypertext Transfer Protocol (HTTP)
and its corresponding secured version, HTTPS, there is no URI scheme
for email addresses to designate whether communication with the
SMTP server should be conducted via a cleartext or TLS-encrypted
channel.
</t>

<t>
As an example, a Message Transfer Agent (MTA) may need to forward a message to a
particular email recipient &lt;user@example.com&gt;.  To deliver
the message, the MTA needs to retrieve the MX exchange domain
names of example.com
from the DNS, and deliver the message to one of the named hosts.
Absent DNSSEC, the MX lookup is vulnerable to man-in-the-middle
(MITM) and DNS cache poisoning attacks.  Active attackers can forge
DNS replies with fake MX records, and can redirect email to servers
of their choice.
</t>

<t>
TLS clients are generally vulnerable to MITM attacks unless they
verify that the server's certificate binds its public key to the
hostname used by the client to resolve the server's network address
in the DNS.
</t>

<t>
MX exchange names are subject to tampering without the use of DNSSSEC,
thus secure verification of MX host TLS certificates is not possible
without DNSSEC.  Even with verified DNS data, an MITM attacker can also suppress
the MX host's STARTTLS EHLO response, convincing an SMTP client that
communication over TLS is unavailable.
</t>

<t>
One might try to harden the use of STARTTLS against DNS attacks by
requiring each MX host to possess a trusted certificate for the
envelope recipient domain rather than the MX hostname.  Unfortunately,
this is impractical, as email for many domains is handled by third
parties that are not in a position to obtain certificates for all
the domains they serve.  Deployment of the Server Name Indication
(SNI) extension to TLS (see <xref target="RFC6066"/>
Section 3) is no panacea, since SNI key management is operationally
challenging except when the email service provider is also the
domain's registrar and its certificate issuer; this is rarely the
case for email.
</t>

<t>
Since the recipient domain name cannot be used as the SMTP server
authentication identity, and neither can the MX hostname without
DNSSEC, large-scale deployment of authenticated TLS for SMTP requires
that the DNS be secure.  At this time, DNSSEC is not yet widely
deployed and MTA-to-MTA traffic between Internet-connected organizations
is most frequently entirely unencrypted, or occasionally
uses TLS without authentication, which
protects only against passive eavesdropping attacks.
</t>

<t>
The exceptions are cases in which the sending MTA is explicitly
configured to use TLS for mail sent to specifically selected peer
domains.  In most cases this also requires MTAs to be configured with appropriate
subject names or certificate content digests to
expect in the presented host certificates.
Such statically configured SMTP secure channels are used
rarely (generally only between domains that make bilateral arrangements
with their business partners).  Internet email, on the other hand,
requires regularly contacting new domains for which security
configurations cannot be established in advance.
</t>

<t>
Note, the above does not apply to mail submission <xref target="RFC6409"/>,
where an MUA is pre-configured to send its outgoing email to a fixed
Message Submission Agent (MSA).  Submission servers usually offer
TLS and the MUA is often configured to require TLS with its chosen
MSA.  The situation changes, however, when submission servers are
configured dynamically via SRV records (see <xref target="RFC6186"/>
Section 6).  Applications to submission via SRV records will be
discussed later in this memo.  <!-- XXXWJH: or another ID -->
</t>

<t>
The abstraction of the SMTP transport endpoint via DNS MX records,
often across organization boundaries, limits the use of public CA
PKI with SMTP to a small set of sender-configured peer domains.
With little opportunity to use TLS authentication, sending MTAs are
rarely configured with a comprehensive list of trusted CAs.  MX
hosts that support STARTTLS often use X.509 certificates that are
self-signed or issued by a private CA.
</t>

<t>
This does not mean, however, that the Internet email backbone cannot
benefit from TLS.  The fact that transport security is not explicitly
specified in either the recipient address or the MX record means
that new protocols must be used to furnish out-of-band information to SMTP.
Such new protocols can make it possible to simultaneously discover which peer domains
support secure delivery via TLS and how to verify the authenticity
of the associated MX hosts.  This document defines how DANE TLSA
records are used to harden SMTP STARTTLS against MITM attacks.
</t>

</section><!-- SMTP Channel Security -->

<section title="Terminology" anchor="terms">

<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
this document are to be interpreted as described in <xref target="RFC2119"/>.
</t>


<t>
The following terms or concepts are used through the document:
</t>
<t>
<list style="hanging">

    <t hangText="secure, bogus, insecure, indeterminate:">
    DNSSEC validation results, as defined in Section 4.3 of <xref
    target="RFC4035"/>.  </t>

    <t hangText="Validating Security-Aware Stub Resolver and
    Non-Validating Security-Aware Stub Resolver:">
    Capabilities of the stub resolver in use as defined in <xref
    target="RFC4033" />; note that this specification requires the
    use of a Security-Aware Stub Resolver; Security-Oblivious
    stub-resolvers MUST NOT be used.  </t>

    <t hangText="opportunistic DANE TLS:">
    Best-effort use of TLS, resistant to downgrade attacks for
    destinations with DNSSEC-validated TLSA records.  When opportunistic
    DANE TLS is determined to be unavailable, clients should fall
    back to opportunistic TLS below.  Opportunistic DANE TLS requires
    support for DNSSEC, DANE and STARTTLS on the client side and
    STARTTLS plus a DNSSEC published TLSA record on the server side.  </t>

    <t hangText="(pre-DANE) opportunistic TLS:">
    Best-effort use of TLS that is generally vulnerable to DNS
    forgery and STARTTLS downgrade attacks.  When a TLS-encrypted
    communication channel is not available, message transmission
    takes place in the clear.  MX record indirection generally
    precludes authentication even when TLS is available.  </t>

    <t hangText="MX hostname:">
    The RRDATA of an MX record consists of a 16 bit preference
    followed by a Mail Exchange domain name (see <xref target="RFC1035"/>,
    Section 3.3.9).  We will use the term "MX hostname" to refer
    to the latter, that is, the DNS domain name found after the
    preference value in an MX record.  Thus an "MX hostname" is
    specifically a reference to a DNS domain name, rather than any
    host that bears that name.  </t>

    <t hangText="MX host:">
    An SMTP server whose name appears in an MX record for a particular
    domain.  Used to refer specifically to the host itself, not its DNS
    name.
    </t>

    <!-- XXXWJH: I think we need three actions to be defined here (one
         of which is already next).  Then we can say through the rest
         of the document at each step what the action should be.  The
         three actions should be something like "delay delivery",
         "connect only over authenticated and encrypted TLS" and
         "connect over either encrypted TLS or over unprotected TCP".
    With these in place we can rewrite the document again using these
    terms.  And we can define things based on 4033 language when
    talking about the appropriate stub resolver cases. -->
    <!-- XXXVD: Actually we have the following *four* choices:
    	1.  Secure delivery via authenticated TLS
	2.  Passive intercept protected delivery via unauthenticated, but
	    required TLS.
	3.  Opportunistic TLS.
	4.  Delayed delivery.
	Not yet sure whether we want to list them all here, some may be more
	clear if defined in context.
    -->

    <t hangText="delayed delivery:">
    Email delivery is a multi-hop store &amp; forward process.  When
    an MTA is unable forward a message that may become deliverable
    later, the message is queued and delivery is retried periodically.
    Some MTAs may be configured with a fallback next-hop destination
    that handles messages that the MTA would otherwise queue and
    retry.  In these cases, messages that would otherwise have to
    be delayed, may be sent to the fallback next-hop destination
    instead.  The fallback destination may itself be subject to
    opportunistic or mandatory DANE TLS as though it were the
    original message destination.  </t>

    <t hangText="original next hop destination: ">
    The logical destination for mail delivery.  By default this is
    the domain portion of the recipient address, but MTAs may be
    configured to forward mail for some or all recipients via
    designated relays.  The original next hop destination is,
    respectively, either the recipient domain or the associated
    configured relay.  </t>

    <t hangText="MTA: ">
    Message Transfer Agent (<xref target="RFC5598" />, Section 4.3.2).  </t>

    <t hangText="MSA: ">
    Message Submission Agent (<xref target="RFC5598" />, Section 4.3.1).  </t>

    <t hangText="MUA: ">
    Message User Agent (<xref target="RFC5598" />, Section 4.2.1).  </t>
</list>
</t>

</section><!-- Terminology -->
</section><!-- Introduction -->

<section title="Hardening (pre-DANE) Opportunistic TLS">

<t>
Neither email addresses nor MX hostnames (or submission SRV records)
signal a requirement for either secure or cleartext transport.
Therefore, SMTP transport security is of necessity generally
opportunistic (barring manually configured exceptions).
</t>

<t>
This specification makes it possible for DANE TLSA records to
securely signal TLS support and to publish the means by which SMTP
clients can successfully authenticate legitimate SMTP servers.  This
becomes opportunistic DANE TLS and is resistant to downgrade and MITM attacks,
and enables an incremental transition of the email backbone to
authenticated TLS delivery, with increased global protection as
adoption increases.
</t>

<t>
With opportunistic DANE TLS, traffic from SMTP clients to domains
that publish "usable" DANE TLSA records in accordance with this
memo is authenticated and encrypted.  Traffic from non-compliant
clients or to domains that do not publish TLSA records will continue
to be sent in the same manner as before, via manually configured
security, (pre-DANE) opportunistic TLS or just cleartext SMTP.
</t>

<section title="DNS errors, bogus and indeterminate responses" anchor="dnserr">

<t>
An SMTP client that implements opportunistic DANE TLS per this
specification depends critically on the integrity of DNSSEC lookups.
This section lists potential issues and states DNS resolver
requirements needed to avoid downgrade attacks.  The requirements
of this section need not apply to email delivery to destinations
for which the SMTP client is configured to employ a security mechanism
other than opportunistic DANE TLS.
</t>

<t>
A DNS lookup may signal an error or return a definitive answer.  When
a security-aware resolver is being used, the security status of a
DNS RRset can take one of four possible values defined in
Section 4.3 of <xref target="RFC4035"/>: "secure", "insecure", "bogus"
and "indeterminate".  In <xref target="RFC4035"/> the meaning of the
"indeterminate" security status is:
</t>
<figure>
<artwork>
  An RRset for which the resolver is not able to determine whether
  the RRset should be signed, as the resolver is not able to obtain
  the necessary DNSSEC RRs.  This can occur when the security-aware
  resolver is not able to contact security-aware name servers for
  the relevant zones.
</artwork>
</figure>
<t>
When a validation is being performed by a validating resolver, its
security status can take one of four possible values defined in
Section 4.3 of <xref target="RFC4035"/>: "secure", "insecure", "bogus"
and "indeterminate".  Unfortunately, the "indeterminate" security
status from a validating resolver has a conflicting definition in
section 5 of <xref target="RFC4033"/> compared to the definition from
<xref target="RFC4035" /> above:
</t>
<figure>
<artwork>
  There is no trust anchor that would indicate that a specific
  portion of the tree is secure.
</artwork>
</figure>
<t>
<!-- XXXVD: I don't think I agree with the below, the difference is
I think more fundamental. -->
The difference between these two seemingly conflicting definitions
arises from their context: in one case, validation is being
performed by the resolver itself (<xref target="RFC4033"/>) and in the
other case the resolver may or may not be validating the results
itself (<xref target="RFC4035"/>).  It is not possible for a validating
resolver in <xref target="RFC4033"/> to validate the results of a
portion of the DNS tree for which it doesn't have a trust anchor. 
</t>

<t>
Accordingly, it is a priori not possible for RFC4033 "indeterminate"
answers for the query domain to be validated.  SMTP clients following
this specification need not distinguish between "insecure" and
"indeterminate" in the <xref target="RFC4033"/> sense.
Both "insecure" and RFC4033 "indeterminate" are handled identically:
in either case unvalidated data for the query domain is all that
is and can be available.  In what follows, when we say "insecure",
we include also DNS results for domains that lie in a portion of
the DNS tree for which there is no applicable trust anchor.  With
the DNS root zone signed, we expect that most validating resolvers will be
configured with the trust anchor data for the root zone.  Therefore,
RFC4033-style "indeterminate" domains should be rare in practice.
</t>

<t>
From here on, when we say "indeterminate", it is exclusively in the
sense of <xref target="RFC4035"/>.  As noted in section 4.3 of <xref
target="RFC4035"/> a security-aware DNS resolver MUST be able to
determine whether a given non-error DNS response is "secure",
"insecure", "bogus" or "indeterminate".  This creates a complication
for non-validating security-aware stub resolvers.  There is not, at
this time, a standard way to communicate a validation status of
"indeterminate" from a validating nameserver to a non-validating
stub resolver.
</t>

<t>
Since an "indeterminate" security status is the result of a failure
to either construct a trust chain to the target domain or to determine
securely that no such chain exists, some validating recursive
resolvers signal this via a DNS error code such as "ServFail".  The
use of such validating resolvers by non-validating security aware
stub resolvers is compatible with this specification.  If, on the
other hand, the validating recursive resolver returns "indeterminate"
results in a manner that is indistinguishable to the non-validating
stub resolver from "insecure" results, the combination of non-validating
stub resolver and validating recursive resolver is vulnerable to
downgrade attacks and is not compatible with this specification.
Because of this, until reliable signaling is available between a
validating recursive resolver and the non-validating security-aware
stub resolver to which it is returning results, validating
security-aware stub resolvers SHOULD be used instead of their
non-validating counterparts.
</t>

<t>
An MTA making use of a non-validating security-aware stub resolver
MAY use the stub resolver's ability, if available, to signal DNSSEC
validation status based on information the stub resolver has learned
from an upstream validating recursive resolver.  In accordance with
section 4.9.3 of <xref target="RFC4035"/>:
</t>
<figure>
<artwork>
  ... a security-aware stub resolver MUST NOT place any reliance on
  signature validation allegedly performed on its behalf, except
  when the security-aware stub resolver obtained the data in question
  from a trusted security-aware recursive name server via a secure
  channel.
</artwork>
</figure>
<t>
When a non-validating security-aware stub resolver is used, the MTA administrator
MUST make sure that all upstream recursive resolvers are DNSSEC
validating, a secure channel exists to each one and that each
combination of the non-validating security-aware  stub resolver with any of the
configured validating recursive resolvers does not cause
"indeterminate" results to be processed as either "secure" or
"insecure".
<!-- XXXWJH: this doesn't make sense.  I suspect we need to say
     4035/indeterminate for #1 and 4033/indeterminate for #2? -->
"Indeterminate" results MUST be reported to the MTA
as one of "indeterminate", "bogus" or an error condition.
</t>

<t>
To avoid much repetition in the text below, we will pause to explain
the handling of "bogus" DNSSEC query responses.  These are not
necessarily the result of a malicious actor; they can, for example,
occur when network packets are corrupted in transit.
</t>

<t>
In this light, "bogus" replies are a form of lookup failure, provided
we carefully define what we mean by a DNS lookup failure.  There
are two important non-failure conditions we need to highlight in
addition to the obvious case of the DNS client obtaining a well-formed
response with relevant resource records in the answer section: </t>

<!-- XXXWJH: needs reworked to drop RCODE references and speak more
     generically -->
<t>
<list style="numbers">
<t> When a DNSSEC response that with a validation status that is
neither "bogus" nor "indeterminate" has an RCODE of "NoError" (<xref
target="RFC6895"/> Section 2.3), but the answer count is zero; while
the DNS client may not have obtained any data of the requested type,
the response is not a DNS error condition.  The DNS client has not
been left without an answer; it learns that records of the requested
type do not exist. </t>

<t> Similarly, when a DNSSEC response that is neither "bogus" nor
"indeterminate" has an RCODE of "NXDomain", once again the DNS
client learns not only that records of the requested type do not
exist, but also that the query domain does not exist.  </t>
</list>
</t>

<t>
When the response is malformed, or has any RCODE other than "NoError"
or "NXDOMAIN", the DNS lookup has failed.  Returning to DNSSEC,
when an MTA chooses to delegate DNSSEC validation to a validating
recursive resolver it will not in practice see any "bogus" results.
Rather, these will be reported as lookup errors with a "ServFail"
RCODE.  The foregoing is not a recommendation to use or not use
non-validating stub resolver configurations, rather, it it is
intended to explain the point of view that "bogus" replies are just
lookup errors and MUST be treated in the same manner as all other
DNS lookup errors.  Similarly, a DANE SMTP client MUST treat all
"indeterminate" results as lookup errors.
</t>

<t>
In contrast to a "bogus" or an "indeterminate" response, an "insecure"
DNSSEC response is not an error, rather it indicates that the
target DNS zone is not signed or is not connected with the DNSSEC
trust anchors being used, and DNSSEC validation is not applicable
to records associated with the query domain.  Insecure results may
lead to degradation of channel security, but do not stand in the
way of message delivery.  See section <xref target="discovery"/>
for further details.
</t>

<t>
When a stub resolver receives a response containing a CNAME alias,
it will generally restart the query at the target of the alias, and
should do so recursively up to some configured or implementation-dependent
recursion limit.  If at any stage of recursive CNAME expansion a
query fails, the stub resolver's lookup of the original requested
records will result in a failure status being returned.  If at any
stage of recursive expansion the response is "insecure", then it
and all subsequent results, and in particular the final result,
MUST be considered "insecure" regardless of whether the other
responses received were deemed "secure".  If at any stage of recursive
expansion the validation status is "bogus" or "indeterminate", the
resolution of the requested records MUST be considered to have
failed.
</t>

<t>
When a DNS lookup failure (error or "bogus" or "indeterminate" as
defined above) prevents an SMTP client from determining which SMTP
server or servers it should connect to, message delivery MUST be
delayed.  This naturally includes, for example, the case when a
"bogus" or "indeterminate" response is encountered during MX
resolution.  When multiple SMTP server names are determined via a
successful MX lookup, but a DNS lookup failure prevents network
address resolution for a given server, delivery may proceed via any
remaining servers.
</t>

<t>
When a particular SMTP server is selected as the delivery destination,
a set of DNS lookups must be performed to determine the related
TLSA records.  If any DNS queries used to locate TLSA records fail
(be it due to "bogus" or "indeterminate" records, timeouts, malformed
replies, etc.), then the SMTP client MUST treat that server as
unreachable and MUST NOT deliver the message via that server.  If
no servers are reachable, delivery is delayed.
</t>

<t>
In what follows, we will only describe what happens when all relevant
DNS queries succeed.  If any DNS failure occurs, the SMTP client MUST
behave as described in this section, by skipping the problem MX host,
or the problem destination.  Queries for candidate TLSA records are
explicitly part of "all relevant DNS queries" and SMTP clients MUST
NOT continue to connect to an MX host or destination whose TLSA record
lookup fails.
</t>

</section><!-- DNS lookup errors and bogus responses -->

<section title="TLS discovery" anchor="discovery">

<t>
As noted previously (<xref target="channelsec" />), opportunistic
TLS with SMTP servers that advertise TLS support via STARTTLS is
subject to an MITM downgrade attack.  Also some SMTP servers that
are not, in fact, TLS capable, erroneously advertise STARTTLS by
default and clients need to be prepared to retry cleartext delivery
after STARTTLS fails.  In contrast, DNSSEC validated TLSA records
are unlikely to be accidentally published for servers that do not
support TLS, and thus clients can safely interpret their presence
as a commitment by the server operator to implement TLS and STARTTLS.
</t>

<t>Specifically, this memo defines four actions to be taken after the
search for a TLSA record returns secure usable results, secure unusable
results, insecure or no results or an error signal:

<list style="hanging">
<t hangText="Secure TLSA RRset with at least usable record:"> A
connection to the MTA MUST be made using authenticated and encrypted
TLS, using the techniques discussed in the rest of this document.
Failure to establish an authenticated TLS connection MUST result
in falling back to the next MX host or delayed delivery.
</t>

<t hangText="Secure non-empty TLSA RRset with all records unusable:">
A connection to the MTA MUST be made via TLS, but authentication
is not required.  Failure to establish an encrypted TLS connection
MUST result in falling back to the next MX host or delayed delivery.  </t>

<t hangText="Insecure or no-TLSA RRset:"> A connection to the MTA
SHOULD be made using (pre-DANE) opportunistic TLS, this includes
cleartext delivery when the remote SMTP server does not appear to
support TLS, and optionally also fallback to cleartext when a TLS
handshake fails.  </t>

<t hangText="Any lookup error:"> Lookup errors include "bogus"
replies as explained in <xref target="dnserr"/>.  This MUST result
in falling back to the next MX host or delayed delivery.  </t>
</list>
</t>

<t>
An SMTP client may be configured to require DANE verified delivery for
some destinations.  We will call such a configuration "mandatory DANE
TLS".  With mandatory DANE TLS, delivery proceeds only when "secure"
TLSA records are used to establish an encrypted and authenticated TLS
channel with the SMTP server.  Neither cleartext nor unauthenticated
TLS connections are used with mandatory DANE TLS destinations.
</t>

<t>
An operational error on the sending or receiving side that cannot
be corrected in a timely manner may at times lead to consistent
failure to deliver time-sensitive email.  The sending MTA administrator
may have to choose between letting email queue until the error is
resolved and disabling opportunistic or mandatory DANE TLS for one
or more destinations.  The choice to disable DANE TLS security
should not be made lightly.  Every reasonable effort should be made
to determine that problems with mail delivery are the result of an
operational error, and not an attack.  A fallback strategy
may be to configure explicit out-of-band TLS security settings if
supported by the sending MTA.
</t>

<t>
<!-- XXXWJH: hmm...  the stub resolver should take care of this; we
should probably remove it (counter to what I've said before) -->
A note about DNAME aliases:  a query for a domain name whose ancestor
domain is a DNAME alias returns the DNAME RR for the ancestor domain,
along with a CNAME that maps the query domain to the corresponding
sub-domain of the target domain of the DNAME alias.  Therefore,
whenever we speak of CNAME aliases, we implicitly allow for the
possibility that the alias in question is the result of an ancestor
domain DNAME record.  Consequently, no explicit support for DNAME
records is needed in SMTP software, it is sufficient to process the
resulting CNAME aliases.  DNAME records only require special
processing in the DNSSEC library that validates the integrity of
the combined DNAME + CNAME reply.  When DNSSEC validation is handled
by a local caching resolver, rather than the MTA itself, even that
part of the DNAME support logic is outside the MTA.
</t>

<t>
<!-- XXXWJH: probably need to state when this occurs; eg, local policy -->
When the original next-hop destination is an address literal, rather
than a DNS domain, DANE TLS does not apply.  Delivery proceeds using
any relevant security policy configured by the MTA administrator.
<!-- XXXVD: Should we in fact highlight this? -->
Similarly, when an MX RRset incorrectly lists an IPv4 address in lieu
of an MX hostname, if the MTA chooses to connect to the IPv4 address
thus specified DANE TLSA does not apply.
</t>

<t>
In the subsections that follow we explain how to locate the SMTP
servers and the associated TLSA records for a given next-hop
destination domain.  We also explain which name or names are to be
used in identity checks of the SMTP server certificate.
</t>

<section title="MX resolution" anchor="mx">

<t>
In this section we consider next-hop domains that are subject to
MX resolution and have MX records.  The TLSA records and the associated
base domain are derived separately for each MX hostname that is used
to attempt message delivery.  Clearly, if DANE TLS security is to
apply to message delivery via any of the MX hosts, the MX records
must be obtained securely via a DNSSEC validated MX lookup.
</t>

<t>
MX records MUST be sorted by preference; an MX hostname with a worse
(numerically higher) MX preference that has TLSA records MUST NOT
preempt an MX hostname with a better (numerically lower) preference
that has no TLSA records.  In other words, prevention of delivery
loops by obeying MX preferences MUST take precedence over channel
security considerations.  Even with two equal preference MX hosts, an MTA
is not obligated to choose the MX hostname that offers more security.
Domains that want secure inbound mail delivery need to ensure that all
their MX hosts are configured accordingly.
</t>

<t>
In the language of <xref target="RFC5321"/> Section 5.1, the original
next-hop domain is the "initial name".  If the MX lookup of the
initial name results in a CNAME alias, we replace the initial name
with the resulting name and perform a new lookup with the new name.
MTAs typically support recursion in CNAME expansion, so this
replacement is performed repeatedly until the ultimate non-CNAME
domain is found.
</t>

<t>
If, the MX RRset (or any CNAME leading to it) is "insecure" (see <xref target="dnserr"/>),
DANE TLS does not apply, and delivery proceeds via pre-DANE opportunistic TLS.
Otherwise, the MX RRset is "secure", and the SMTP client MUST treat each
MX hostname as a separate
non-MX destination for opportunistic DANE TLS as described
in <xref target="non-mx"/>.  When, for a given MX hostname, no TLSA
records are found, or only "insecure" TLSA records are found, DANE
TLSA is not applicable with the MX host in question and delivery
proceeds to that host as with pre-DANE opportunistic TLS.  To avoid
downgrade attacks, any errors during TLSA lookups MUST, as explained in
<xref target="dnserr"/>, cause the MX host in question to be treated
as unreachable.
</t>

</section><!-- MX resolution -->

<section title="Non-MX destinations" anchor="non-mx">

<t>
This section describes the algorithm used to locate the TLSA records
and associated TLSA base domain for an input domain not subject to
MX resolution.  Such domains include:
</t>

<t>
<list style="symbols">

<t> Each MX hostname used in a message delivery attempt for an
original next-hop destination domain subject to MX resolution.
Note, MTAs are not obligated to support CNAME expansion of MX
hostnames. </t>

<t> Any administrator configured relay hostname, not subject to MX
resolution, configured by the MTA administrator to handle some or
all mail. </t>

<t> A next-hop destination domain subject to MX resolution that has
no MX records.  In this case the domain's name is implicitly the
hostname of its sole SMTP server. </t>

</list>
</t>

<t>
DNS queries with type TLSA are mishandled by some load balancing
nameservers that serve the MX hostnames of large email providers.
The DNS zones served by these nameservers are not signed and contain
no TLSA records, but queries for TLSA records fail, rather than
returning the non-existence of the requested TLSA records.
</t>

<t>
To avoid problems delivering mail to domains whose SMTP servers are
served by the problem nameservers the SMTP client MUST perform any
A and/or AAAA queries for the destination before attempting to locate
the associated TLSA records.  This lookup is needed in any case
to determine whether the destination domain is reachable and the
DNSSEC validation status of each stage of the chain of CNAME queries
required to reach the final result.
</t>

<t>
If no address records are found, the destination is unreachable.
If address records are found, but the DNSSEC validation status of
the first query response is "insecure" (there may be additional
queries if the initial response is a CNAME alias), the SMTP client
SHOULD NOT proceed to search for any associated TLSA records.  With
the problem domains, TLSA queries will lead to DNS lookup errors
and cause messages to be consistently delayed and ultimately
returned to the sender.  We don't expect to find any "secure" TLSA
records associated with a TLSA base domain that lies in an unsigned
DNS zone.  Therefore, skipping TLSA lookups in this case will also
reduce latency with no detrimental impact on security.
</t>

<t>
When CNAME expansion is applicable, in the language of <xref
target="RFC5321"/> Section 5.1, the input domain is the "initial
name".  If the A and/or AAAA lookup of the initial name yields a
CNAME, we replace it with the resulting name as if it were the
initial name and perform a lookup again using the new name.  This
replacement is performed recursively.
</t>

<t> We consider the following cases: </t>

<t>
<list style="hanging">

<t hangText="Not found: ">
When the DNS queries for A and/or AAAA records yield neither a list
of addresses nor a CNAME (or CNAME expansion is not supported) the
destination is unreachable.
</t>

<t hangText="Non-CNAME: ">
The input domain is not a CNAME alias.  If the address
RRset is "secure" TLSA lookups are performed as described in <xref
target="tlsa-lookup"/> with the input domain as the candidate TLSA
base domain.  If no "secure" TLSA records are found, DANE TLS is
not applicable and mail delivery proceeds with pre-DANE opportunistic
TLS (which, being best-effort, degrades to cleartext delivery when
STARTTLS is not available or the TLS handshake fails).
</t>

<t hangText="Insecure CNAME: ">
The input domain is a CNAME alias, but the ultimate network address
RRset is "insecure" (see <xref target="dnserr"/>).  If the initial
CNAME response is also "insecure", DANE TLS does not apply.  Otherwise,
this case is treated just like the non-CNAME case above, where a
search is performed for a TLSA record with the original input domain
as the candidate TLSA base domain.
</t>

<t hangText="Secure CNAME: ">
The input domain is a CNAME alias, and the ultimate network address
RRset is "secure" (see <xref target="dnserr"/>).  Two candidate TLSA
base domains are tried, first the fully CNAME-expanded input domain,
then the original input domain.
</t>

</list>
</t>

<t>
In summary, if it is possible to securely obtain the full,
CNAME-expanded, DNSSEC-validated address records for the input
domain then that name is the preferred TLSA base domain.  Otherwise,
the unexpanded input-MX domain is the candidate TLSA base domain.
When no "secure" TLSA records are found at either the CNAME-expanded
or unexpanded domain, then DANE TLS does not apply for mail delivery
via the input domain in question.
</t>

</section><!-- Non-MX destinations -->

<section title="TLSA record lookup" anchor="tlsa-lookup">

<t>
Each candidate TLSA base domain, that is, the original or fully
CNAME-expanded name of a non-MX destination or a particular MX
hostname of an MX destination, is in turn prefixed with service
labels of the form "_&lt;port&gt;._tcp".  The resulting domain
name is used to issue a DNSSEC query with the query type set to
TLSA (<xref target="RFC6698"/> Section 7.1).
</t>

<t>
The query response may be a CNAME, or the actual TLSA RRset.  If
the response is a CNAME, the SMTP client restarts the TLSA query
at the target domain, following CNAMEs as appropriate and keeping
track of whether the entire chain is "secure".  If any "insecure"
records are encountered, or equivalently TLSA records don't exist,
the next candidate TLSA base is tried instead.
</t>

<t>
If the ultimate response is a "secure" TLSA RRset (see <xref
target="dnserr"/>) then the candidate TLSA domain will be the actual
TLSA domain and the TLSA RRset will constitute the TLSA records for
the destination.  If none of the candidate TLSA base domains yield
"secure" TLSA records then delivery should proceed via pre-DANE
opportunistic TLS.
</t>

<t>
For SMTP, the destination TCP port is typically 25, but this may
be different with custom routes specified by the MTA administrator
or when an MUA connects to a submission server on port 587.  The
SMTP client MUST use the appropriate number in the "_&lt;port&gt;"
prefix in place of "_25".  If, for example, the candidate base
domain is "mail.example.com", and the SMTP connection is to port
25, the TLSA RRset is obtained via a DNSSEC query of the form:
</t>

<figure>
<artwork>
_25._tcp.mail.example.com. IN TLSA ?
</artwork>
</figure>

<t>
TLSA record publishers may leverage CNAMEs to reference a single
authoritative TLSA RRset specifying a common certificate authority
or a common end entity certificate to be used with multiple TLS
services.  Such CNAME expansion does not change the SMTP client's
notion of the TLSA base domain; thus, when _25._tcp.mail.example.com
is a CNAME, the base domain remains mail.example.com and is still
the name used in peer certificate name checks.
</t>

<t>
Note, shared end entity certificate associations expose the publishing
domain to substitution attacks, where an MITM attacker can reroute
traffic to a different server that shares the same end entity
certificate.  Such shared end entity records should be avoided
unless the servers in question are interchangeable.
</t>

<t>
For example, given the DNSSEC validated records below:
</t>

<figure>
<artwork>
  example.com.                IN MX 0 mail.example.com.
  example.com.                IN MX 0 mail2.example.com.
  _25._tcp.mail.example.com.  IN CNAME tlsa211._dane.example.com.
  _25._tcp.mail2.example.com. IN CNAME tlsa211._dane.example.com.
  tlsa211._dane.example.com.  IN  TLSA 2 1 1 e3b0c44298fc1c14....
</artwork>
</figure>

<t>
The MX hosts mail.example.com and mail2.example.com will be expected
to have certificates issued under a common trust anchor, but each
MX hostname's TLSA base domain remains unchanged despite the above
CNAME records.  Each MX host's certificate subject name (or one of
the subject alternative names) is expected to match either the
corresponding MX hostname or else "example.com".
</t>

<t>
If, during TLSA resolution (including possible CNAME indirection),
at least one "secure" TLSA record is found (even if not usable
because it is unsupported by the implementation or support is
administratively disabled), then the corresponding host has signaled
its commitment to implement TLS.  The SMTP client SHOULD NOT deliver
mail via the corresponding host unless a TLS session is negotiated
via STARTTLS.  This is required to avoid MITM STARTTLS downgrade
attacks.
</t>

<t>
As noted previously (in Section <xref target="non-mx"/>), when no
"secure" TLSA records are found at the fully CNAME-expanded name,
the original unexpanded name MUST be tried instead.  Intermediate
names that arise during CNAME expansion that are neither the original,
nor the final name, are never candidate TLSA base domains, even if
"secure".  This supports customers of hosting providers where the
provider's zone cannot be validated with DNSSEC, but the customer
has shared appropriate key material with the hosting provider to
enable TLS via SNI.
</t>

</section><!-- TLSA record lookup -->
</section><!-- TLS discovery -->

<section title="DANE authentication">

<t>
This section describes which TLSA records are applicable to SMTP
opportunistic DANE TLS and how to apply such records to authenticate
the SMTP server.  With opportunistic DANE TLS, both the TLS support
implied by the presence of DANE TLSA records and the verification
parameters necessary to authenticate the TLS peer are obtained
together, therefore authentication via this protocol is expected
to be less prone to connection failure caused by incompatible
configuration of the client and server.
</t>

<section title="TLSA certificate usages">

<t>
The DANE TLSA specification <xref target="RFC6698"/> defines multiple
TLSA RR types via combinations of 3 numeric parameters.  The numeric
values of these parameters were later given symbolic names in <xref
target="I-D.ietf-dane-registry-acronyms"/>.  The rest of the TLSA
record is the "certificate association data field", which specifies
the full or digest value of a certificate or public key.  The
parameters are:
</t>

<t>
<list style='hanging'>

<t hangText="The TLSA Certificate Usage field:"> Section 2.1.1 of <xref
target="RFC6698"/> specifies 4 values: PKIX-TA(0), PKIX-EE(1), DANE-TA(2),
and DANE-EE(3).  There is an additional private-use value: PrivCert(255).
All other values are reserved for use by future specifications.  </t>

<t hangText="The selector field:"> Section 2.1.2 of <xref
target="RFC6698"/> specifies 2 values: Cert(0), SPKI(1).  There is
an additional private-use value: PrivSel(255).  All other values are
reserved for use by future specifications.  </t>

<t hangText="The matching type field:"> Section 2.1.3 of <xref
target="RFC6698"/> specifies 3 values: Full(0), SHA2-256(1), SHA2-512(2).
There is an additional private-use value: PrivMatch(255).  All other
values are reserved for use by future specifications.  </t>

</list>
</t>

<t>
We may think of TLSA Certificate Usage values 0 through 3 as a
combination of two one-bit flags.  The low bit chooses between
trust anchor (TA) and end entity (EE) certificates.  The high bit
chooses between public PKI issued and domain-issued certificates.
</t>

<t>
The selector field specifies whether the TLSA RR matches the whole
certificate: Cert(0), or just its subjectPublicKeyInfo: SPKI(1).
The subjectPublicKeyInfo is an ASN.1 DER encoding of the certificate's
algorithm id, any parameters and the public key data.
</t>

<t>
The matching type field specifies how the TLSA RR Certificate Association
Data field is to be compared with the certificate or public key.  A value
of Full(0) means an exact match: the full DER encoding of the certificate
or public key is given in the TLSA RR.  A value of SHA2-256(1) means
that the association data matches the SHA2-256 digest of the certificate
or public key, and likewise SHA2-512(2) means a SHA2-512 digest is used.
</t>

<section title="Certificate usage 3" anchor="cert3">

<t>
Since opportunistic DANE TLS will be used by non-interactive MTAs,
with no user to "press OK" when authentication fails, reliability
of peer authentication is paramount.  
</t>

<t>
Authentication via certificate usage "3" TLSA records involves
simply checking that the server's leaf certificate matches the TLSA
record.  Other than extracting the relevant certificate elements
for comparison, no other use is made of the certificate content.
Authentication via certificate usage "3" TLSA records involves
no certificate authority signature checks.  It also involves no
server name checks, and thus does not impose any new requirements
on the names contained in the server certificate (SNI is not required
when the TLSA record matches the server's default certificate).
</t>

<t>
Two TLSA records will need to be published before updating a server's
public key, one matching the currently deployed key and the other
matching the new key scheduled to replace it.  Once sufficient time
has elapsed for all DNS caches to expire the previous TLSA RRset,
which contains only the old key, the server may be reconfigured to
use the new private key and associated public key certificate.  Once
the server is using the new key, the TLSA RR that matches the retired
key can be removed from DNS, leaving only the RR that matches the
new key.
</t>

<t>
TLSA records published for SMTP servers SHOULD, in most cases, be
"3 1 1" records.  Such records have "certificate usage" 3, thus
they are associated with the end entity (i.e. SMTP server) certificate.
The "selector" is 1, which indicates that the record describes the
public key portion the server certificate.  Finally, the "matching
type" is 1, which indicates that the "association data" is the
SHA2-256 digest of the server's public key.  Since all DANE
implementations are required to support SHA2-256, this record works
for all clients and need not change across certificate renewals
with the same key.
</t>

</section><!-- Certificate usage 3 -->

<section title="Certificate usage 2">

<t>
Some domains may prefer to reduce the operational complexity of
publishing unique TLSA RRs for each TLS service.  If the domain
employs a common issuing certificate authority to create certificates
for multiple TLS services, it may be simpler to publish the issuing
authority as a trust anchor (TA) for the certificate chains of all
relevant services.  The TLSA RRs for each service issued by the
same TA may then be CNAMEs to a common TLSA RRset that matches the
TA.
</t>

<t>
SMTP servers that rely on certificate usage "2" TLSA records for
TLS authentication MUST include the TA certificate as part of the
certificate chain presented in the TLS handshake even when it is a
self-signed root certificate.  SMTP clients cannot generally be
expected to have domain-issued trust anchor certificates in their
trusted certificate store.  Even when the TA happens to be in the
trusted certificate store, many MTAs will not employ any of their
locally trusted certificates when processing usage 2 TLSA records.
</t>

<t>
TLSA Publishers should publish either "2 1 1" or "2 0 1" TLSA
parameters, which specify the SHA2-256 digest of the trust anchor
public key or certificate respectively.  As with leaf certificate
rollover discussed in <xref target="cert3" />, two such TLSA RRs
need to be published to facilitate TA certificate rollover.
</t>

<t>
The usability of "2 1 1" or "2 0 1" TLSA RRs with SMTP is not
assured.  If server operators employing these RRs universally ensure
that the corresponding TA certificate is included in the SMTP
server's TLS handshake certificate chain, clients can safely enable
support for these RRs.  If sufficiently many server administrators
negligently omit the TA certificate from the server's TLS certificate
chain, SMTP clients may elect to not support usage "2" TLSA RRs in
order to avoid mail delivery problems.
</t>

<t>
Server operators are encouraged to implement these RRs, if they are
operationally a better fit for their organization, provided they
do so with care.  It is essential to not forget to always include
trust anchor certificates in server certificate chains.  SMTP client
implementations SHOULD support these TLSA RRs, unless, despite the
above warning, a non-trivial fraction of server operators fail to
configure certificate chains that include the required TA certificate.
</t>

</section><!-- Certificate usage 2 -->

<section title="Certificate usages 0 and 1">

<t>
SMTP servers SHOULD NOT publish TLSA RRs with certificate usage "0"
or "1".  SMTP clients cannot be expected to be configured with a
suitably complete set of trusted public CAs.  Even with a full set
of public CAs, SMTP clients cannot (without relying on DNSSEC for
secure MX records and DANE for STARTTLS support signalling) perform
<xref target="RFC6125"/> server identity verification or prevent
STARTTLS downgrade attacks.
</t>

<t>
SMTP client treatment of TLSA RRs with certificate usages "0" or "1"
is undefined.  For example, clients MAY (will likely) treat such TLSA
records as unusable.
</t>

</section><!-- Certificate usages 0 and 1 -->

</section><!-- TLSA certificate usages -->

<section title="Certificate matching" anchor="matching">
<t>
When at least one usable "secure" TLSA record is found, the SMTP
client SHOULD use TLSA records to authenticate the SMTP server.
Messages SHOULD not be delivered via the SMTP server if authentication
fails, otherwise the SMTP client is vulnerable to MITM attacks.
</t>

<t>
To match a server via a TLSA record with certificate usage "2", the
client MUST perform name checks to ensure that it has reached the
correct server.  In all cases the SMTP client MUST accept the TLSA
base domain as a valid DNS name in the server certificate.

<list style="hanging">

<t hangText="MX:">
If the TLSA base domain was obtained indirectly via an MX lookup
(including any CNAME-expanded name of an MX host), then the
original next-hop domain used in the MX lookup MUST be accepted in
the peer certificate.  The CNAME-expanded original next-hop domain
MUST also be accepted if different from the initial query name. </t>

<t hangText="Non-MX:">
If MX records were not used and the TLSA base domain is the
CNAME-expanded original next-hop domain, then the original
next-hop domain MUST also be accepted.  </t>

</list>
</t>

<t>
Accepting certificates with the original next-hop domain in addition
to the MX hostname allows a domain with multiple MX hostnames to
field a single certificate bearing the email domain name across all
the MX hosts.  This also aids inter-operability with pre-DANE SMTP
clients that are configured to look for the email domain name in
server certificates.  For example, with "secure" DNS records as below:
</t>

<figure>
<artwork>
  exchange.example.org. IN CNAME mail.example.org.
  mail.example.org. IN CNAME example.com.
  example.com. IN MX 10 mx10.example.com.
  example.com. IN MX 15 mx15.example.com.
  example.com. IN MX 20 mx20.example.com.
  ;
  mx10.example.com. IN A 192.0.2.10
  _25._tcp.mx10.example.com. IN TLSA 2 0 1 ...
  ;
  mx15.example.com. IN CNAME mxbackup.example.com.
  mxbackup.example.com. IN A 192.0.2.15
  ; _25._tcp.mxbackup.example.com. IN TLSA ? (NXDOMAIN)
  _25._tcp.mx15.example.com. IN TLSA 2 0 1 ...
  ;
  mx20.example.com. IN CNAME mxbackup.example.net.
  mxbackup.example.net. IN A 198.51.100.20
  _25._tcp.mxbackup.example.net. IN TLSA 2 0 1 ...
</artwork>
</figure>

<t>
Certificate name checks for delivery of mail to exchange.example.org
via any of the associated MX hosts MUST accept at least the names
"exchange.example.org" and "example.com", which are respectively
the original and fully expanded next-hop domain.  When the MX host
is mx10.example.com, name checks MUST accept the TLSA base domain
"mx10.example.com".  If, despite the fact that MX hostnames are
required to not be aliases, the MTA supports delivery via
"mx15.example.com" or "mx20.example.com" name checks MUST accept
the respective TLSA base domains "mx15.example.com" and
"mxbackup.example.net".
</t>

<t>
The SMTP client MUST NOT perform certificate usage name checks with
certificate usage "3", since with usage "3" the server is authenticated
directly by matching the TLSA RRset to its certificate or public
key without resort to any issuing authority.  The certificate content
is ignored except in so far as it is used to match the certificate
or public key (ASN.1 DER encoding or its digest) with the TLSA RRset.
</t>

<t>
To ensure that the server sends the right certificate chain, the
SMTP client MUST send the TLS SNI extension containing the TLSA
base domain.  This precludes the use of SSLv2-compatible SSL HELLO
by the SMTP client.  The minimum SSL/TLS client HELLO version for
SMTP clients performing DANE authentication is SSLv3, but a client
that offers SSLv3 needs to also offer at least TLSv1 and MUST include
the SNI extension.  Servers that don't make use of SNI MAY negotiate
SSLv3 if offered by the client.
</t>

<t>
Each SMTP server MUST present a certificate chain (see <xref
target="RFC5246"/> Section 7.4.2) that matches at least
one of the TLSA records.  The server MAY rely on SNI to determine
which certificate chain to present to the client.  Clients that
don't send SNI information may not see the expected certificate
chain.
</t>

<t>
If the server's TLSA RRset includes records with a matching type
indicating a digest record (i.e., a value other than "0"), the
SHA2-256 digest of any object SHOULD be provided along with any other
digest published, since some SMTP clients may support only SHA2-256.
</t>

<t>
If the server's TLSA records match the server's default certificate
chain, the server need not support SNI.  In either case, the server
need not include the extension in its TLS HELLO, simply returning
a matching certificate chain is sufficient.  Servers MUST NOT enforce
the use of SNI by clients, if the client sends no SNI extension,
or sends an SNI extension for an unsupported domain the server MUST
simply use its default certificate chain.  The client may be using
unauthenticated opportunistic TLS and may not expect any particular
certificate from the server.  DANE TLS clients that authenticate the
server may be willing to accept multiple server names, with the SNI
name set to TLSA base domain, but the server's default certificate
may match the original next-hop domain.
</t>

<t>
The SMTP client MAY include anonymous TLS cipher suites in its SSL
HELLO.  SMTP servers hosts that receive email from the Internet
MUST interoperate with opportunistic TLS SMTP clients that include
anonymous ciphers provided the server is able to accept at least
some of the ciphers offered by the client.  If a server advertises
support for STARTTLS in its SMTP EHLO response, it MUST NOT fail
to complete the TLS handshake merely because the SMTP client offered
some cipher suites that do not provide for server authentication.
While SMTP server operators are under no obligation to enable
anonymous cipher suites, no security is gained by sending certificates
clients are willing to ignore.  Indeed support for anonymous cipher
suites in the server makes audit trails more informative.  Log
entries that record connections that employed an anonymous cipher
suite record the fact that the clients did not care to authenticate
the server.
</t>

</section><!-- Certificate matching -->

<section title="Digest algorithm agility" anchor="agility">

<t>
While <xref target="RFC6698"/> specifies multiple digest algorithms,
it does not specify a protocol by which the SMTP client and TLSA
record publisher can agree on the strongest shared algorithm.  Such
a protocol would allow the client and server to avoid exposure to
any deprecated weaker algorithms that are published for compatibilty
with less capable clients, but should if possible be ignored.  We
specify such a protocol below.
</t>

<t>
Suppose that a DANE TLS client authenticating a TLS server considers
digest algorithm X stronger than digest algorithm Y.  Suppose further
that a server's TLSA RRset contains some records with X as the
digest algorithm.  Finally, suppose that for every raw public key
or certificate object that is included in the server's TLSA RRset
in digest form, whenever that object appears with algorithm Y with
some usage and selector it also appears with algorithm X with the
same usage and selector.  In that case our client can safely ignore
TLSA records with the weaker algorithm Y, because it suffices to
check the records with the stronger algorithm X.
</t>

<t>
To achieve digest algorithm agility we mandate that all published TLSA
RRsets conform to the above assumptions.  Then, for each combination
of usage and selector, SMTP clients can simply ignore all digest
records except those that employ the strongest digest algorithm.
The ordering of digest algorithms by strength is not specified in
advance, it is entirely up to the SMTP client.  SMTP client
implementations are encouranged to make the digest algorithm
preference order configurable.  Only the future will tell which
algorithms might be weakened by new attacks and when.
</t>

<t>
Note, TLSA records with a matching type of "0", that publish the
full value of a certificate or public key object, play no role in
digest algorithm agility.  They neither trump the processing of
records that employ digests, nor are they ignored in the presence
of any records with a digest (i.e. non-zero) matching type.
</t>

<t>
Server operators MUST ensure that for any given usage and selector,
each object (certificate or public key), for which a digest association
exists in the TLSA RRset, is published with the SAME SET of digest
algorithms as all other objects that published with that usage and
selector.  In other words, for each usage and selector, the records
with non-zero matching types will correspond to on a cross-product
of a set of underlying objects and a fixed set of digest algorithms
that apply uniformly to all the objects.
</t>

<t>
SMTP clients SHOULD use digest algorithm agility when processing
the DANE TLSA records of an SMTP server.  Algorithm agility is to
be applied after first discarding any unusable or malformed records
(unsupported digest algorithm, or incorrect digest length).  Thus,
for each usage and selector, the client SHOULD process only any
usable records with a matching type of "0" and the usable records
whose digest algorithm is believed to be the strongest among usable
records with the given usage and selector.
</t>

<t>
The main impact of this requirement is on key rotation, when the
TLSA RRset is pre-populated with digests of new certificates or
public keys, before these replace or augment their predecessors.
Were the newly introduced RRs to include previously unused digest
algorithms, clients that employ this protocol could potentially
ignore all the digests corresponding to the current keys or
certificates, causing connectivity issues until the new keys or
certificates are deployed.  Similarly, publishing new records with
fewer digests could cause problems for clients using cached TLSA
RRsets that list both the old and new objects once the new keys are
deployed.
</t>

<t>
To avoid problems, server operators SHOULD apply the following strategy:
<list style="symbols">
<t> When changing the set of objects published via the TLSA RRset
(e.g. during key rotation), DO NOT change the set of digest algorithms
used, change just the list of objects. </t>
<t> When changing the set of digest algorithms, change only the set
of algorithms, and generate a new RRset in which all the current objects
are re-published with the new set of digest algorithms. </t>
</list>
</t>

<t>
The client-side of this "digest algorithm agility" protocol is
enabled by default in the first DANE for SMTP implementation.  For
key rotation to work non-disruptively server operators MUST ensure
that their TLSA records conform with the above specification.
</t>

</section><!-- Digest algorithm agility -->

</section><!-- DANE authentication -->
</section><!-- Hardening Opportunistic TLS -->

<section title="Opportunistic TLS for Submission">

<t>
Prior to <xref target="RFC6409"/>, the SMTP submission protocol was
a poster-child for PKIX (<xref target="RFC5280"/>) public CA based TLS.
The MUA typically connects to one or
a few submission servers explicitly configured by the user.  There
is no indirection via insecure MX records, and unlike web browsers,
there is no need to authenticate a large set of TLS servers.  Once
TLS is enabled for the desired submission server or servers, provided
the server certificate is correctly maintained, the MUA is able to
reliably use TLS to authenticate the submission server.  The MUA's
list of trusted CAs need not be comprehensive, it suffices to trust
just the CAs that issue the certificates of the particular submission
servers.
</t>

<t>
<xref target="RFC6186"/> aims to simplify the configuration of the
MUA submission service by dynamically deriving the submission service
from the user's email address.  This is done via SRV records, but
at the cost of introducing many of the same TLS security problems
faced by MTA to MTA SMTP.  The suggestion to prompt the user when
the SRV record domain is different from the email domain is not a
robust solution.
</t>

<t>
The protocol defined in this memo can also be used to secure
submission service discovery.  If the email domain is DNSSEC signed,
the SRV records are "secure" and the SRV host publishes secure TLSA
records for submission, then the MUA can safely auto-configure to
authenticate the submission server via DANE.  When DANE TLSA records
are not available, the client SHOULD fall back to legacy behavior
(this may involve prompting the user to accept the resulting server
and perhaps "pin" its certificate).
</t>

<t>
Specifically, MUAs that dynamically determine the submission server
via SRV records SHOULD support DNSSEC and DANE TLSA records.  They
SHOULD use TLSA records to authenticate the server.  The processing
of usage 2 and 3 TLSA associations by an MUA is the same as by an
MTA, with SRV records taking the place of MX records.
</t>

<t>
Just as with MX service on port 25, SMTP submission servers SHOULD
NOT publish usage 0 or 1 TLSA associations, and MUAs that support
DANE TLSA are not expected to trust a full list of public CAs.
Server certificate subjectAltNames should include at least the
server name.  When the server administrator is able to obtain a
certificate for the email domain, the server certificate should
also include the email domain name.  MUAs that are not able to
support DNSSEC may then be able to authenticate the server domain.
If it is practical to field additional certificates for hosted
domains, SNI may be used by the server to select the appropriate
domain's certificate.
</t>

</section><!-- Opportunistic TLS for Submission -->

<section title="Mandatory TLS Security">

<t>
An MTA implementing this protocol may require a stronger security
assurance when sending email to selected destinations to which the
sending organization sends sensitive email and may have regulatory
obligations to protect its content.  This protocol is not in conflict
with such a requirement, and in fact can often simplify authenticated
delivery to such destinations.
</t>

<t>
Specifically, with domains that publish DANE TLSA records for their
MX hostnames a sending MTA can be configured to use the receiving
domains's DANE TLSA records to authenticate the corresponding MX
hostnames.  Authentication via DANE TLSA records is easier to manage,
as changes in the receiver's expected certificate properties are
made on the receiver end.  With mandatory DANE TLS, when no usable
TLSA records are found, message delivery is delayed.  Thus mail
is only sent when an authenticated TLS channel is established to
the remote SMTP server.
</t>

<t>
Administrators of mail servers that employ mandatory DANE TLS, need
to carefully monitor their mail logs and queues.  If a partner
domain unwittingly misconfigures their TLSA records, disables DNSSEC,
or misconfigures SMTP server certificate chains, mail will be delayed.
</t>

</section><!-- Mandatory TLS Security -->

<section anchor="Acknowledgements" title="Acknowledgements">

<t>
The authors would like to extend great thanks to Tony Finch, who
started the original version of a DANE SMTP document.  His work is
greatly appreciated and has been incorporated into this document.
The authors would like to additionally thank Phil Pennock for his
comments and advice on this document.
</t>

<t>
Acknowledgments from Viktor: Thanks to Paul Hoffman who motivated
me to begin work on this memo and provided feedback on early drafts.
Thanks also to Wietse Venema who created Postfix, and whose advice
and feedback were essential to the development of the Postfix DANE
implementation.
</t>

</section><!-- Acknowledgements -->

<section anchor="Operational" title="Operational Considerations">

<section anchor="opclients" title="Client Operational Considerations">

<t>
SMTP clients may deploy opportunistic DANE TLS incrementally by
enabling it only for selected sites, or may occasionally need to
disable opportunistic DANE TLS for peers that fail to interoperate due
to misconfiguration or software defects on either end.  Unless local
policy specifies that opportunistic DANE TLS is not to be used for a
particular destination, client MUST NOT deliver mail via a server
whose certificate chain fails to match at least one TLSA record when
usable TLSA records are available.
</t>

<t>
SMTP clients employing opportunistic DANE TLS and TLSA record
publishers for SMTP servers need to follow the guidance outlined
in <xref target="I-D.ietf-dane-ops"/>'s "Certificate Name Check
Conventions", "Service Provider and TLSA Publisher Synchronization"
and "TLSA Base Domain and CNAMEs" sections.
</t>

</section>

<section anchor="oppublishers" title="Publisher Operational Considerations">

<t>
SMTP servers that publish certificate usage 2 (trust anchor)
associations MUST include the TA certificate in their TLS server
certificate chain even when that TA certificate is a self-signed
root certificate.
</t>

<t>
TLSA Publishers MUST follow the digest agility guidelines in <xref
target="agility"/> and make sure that all objects published in
digest form for a particular usage and selector are published with
the same set of digest algorithms.
</t>

<t>
TLSA Publishers should follow the TLSA publication size guidance
found in <xref target="I-D.ietf-dane-ops" /> about "DANE DNS Record
Size Guidelines".
</t>

</section>
</section>

<section anchor="Security" title="Security Considerations">

<t>
This protocol leverages DANE TLSA records to implement MITM resistant
opportunistic channel security for SMTP.  For destination domains
that sign their MX records and publish signed TLSA records for their
MX hostnames, this protocol allows sending MTAs (and perhaps dynamically
configured MUAs) to securely discover both the availability of TLS
and how to authenticate the destination.
</t>

<t>
This protocol does not aim to secure all SMTP traffic, as that is
not practical until DNSSEC and DANE adoption are universal.  The
incremental deployment provided by following this specification is
a best possible path for securing SMTP.  This protocol coexists and
interoperates with the existing insecure Internet email backbone.
</t>

<t>
The protocol does not preclude existing non-opportunistic SMTP TLS
security arrangements, which can continue to be used as before via
manual configuration with negotiated out-of-band key and TLS
configuration exchanges.
</t>

<t>
Opportunistic SMTP TLS depends critically on DNSSEC for downgrade
resistance and secure resolution of the destination name.  If DNSSEC
is compromised, it is not possible to fall back on the public CA
PKI to prevent MITM attacks.  A successful breach of DNSSEC enables
the attacker to publish TLSA usage 3 certificate associations, and
thereby bypass any security benefit the legitimate domain owner
might hope to gain by publishing usage 0 or 1 TLSA RRs.  Given the
lack of public CA PKI support in existing MTA deployments, avoiding
certificate usages 0 and 1 simplifies implementation and deployment
with no adverse security consequences.
</t>

</section><!-- Security Considerations -->

</middle>

<back>
<references title="Normative References">
&RFC1035;
&RFC2119;
&RFC3207;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5246;
&RFC5280;
&RFC5321;
&RFC6125;
&RFC6186;
&RFC6409;
&RFC6066;
&RFC6698;
&I-D.ietf-dane-ops;
</references>
<references title="Informative References">
&RFC5598;
&RFC6394;
&RFC6895;
&I-D.ietf-dane-srv;
&I-D.ietf-dane-smtp;
&I-D.ietf-dane-registry-acronyms;
</references>
</back>
</rfc>
